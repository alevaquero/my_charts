# Default values for sipproxy.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: faheem2084/opensips
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "opensips_arm64-3.4.11"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: NodePort
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  sipPort: 30060
  registrarPort: 30070

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - configMap:
      defaultMode: 420
      items:
      - key: opensips-config
        path: opensips.cfg
      name: opensips
    name: config-volume
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false


# Additional volumeMounts on the output Deployment definition.
volumeMounts: 
  - name: config-volume
    mountPath: "/mnt"
    readOnly: false

nodeSelector: {}

tolerations: []

affinity: {}

container:
  command: "/bin/bash"
  command1: "-c"
  command2: "--" 
  # args: "/usr/local/sbin/opensips -M 3 -m 256 -F -f /usr/local/etc/opensips/opensips.cfg;while true; do echo Alejandro; sleep 10; done;" 
  args: "/usr/local/sbin/opensips -M 3 -m 256 -ddd -f /mnt/opensips.cfg;while true; do echo Alejandro; sleep 10; done;"


opensipsConfig: |
  #
  # OpenSIPS residential configuration script
  #     by OpenSIPS Solutions <team@opensips-solutions.com>
  #
  # This script was generated via "make menuconfig", from
  #   the "Residential" scenario.
  # You can enable / disable more features / functionalities by
  #   re-generating the scenario with different options.#
  #
  # Please refer to the Core CookBook at:
  #      https://opensips.org/Resources/DocsCookbooks
  # for a explanation of possible statements, functions and parameters.
  #

  ####### Global Parameters #########

  /* uncomment the following lines to enable debugging */
  debug_mode=yes

  log_level=3
  xlog_level=3
  stderror_enabled=yes
  syslog_enabled=no
  syslog_facility=LOG_LOCAL0
  open_files_limit=2000

  udp_workers=2

  /* uncomment the next line to enable the auto temporary blacklisting of 
    not available destinations (default disabled) */
  #disable_dns_blacklist=no

  /* uncomment the next line to enable IPv6 lookup after IPv4 dns 
    lookup failures (default disabled) */
  #dns_try_ipv6=yes

  # socket=udp:127.0.0.1:5060   # CUSTOMIZE ME
  socket=udp:*:30060
  socket=udp:*:30070

  ####### Modules Section ########

  #set module path
  mpath="/usr/local//lib64/opensips/modules/"

  #### SIGNALING module
  loadmodule "signaling.so"

  #### StateLess module
  loadmodule "sl.so"

  #### Transaction Module
  loadmodule "tm.so"
  modparam("tm", "fr_timeout", 5)
  modparam("tm", "fr_inv_timeout", 30)
  modparam("tm", "restart_fr_on_each_reply", 0)
  modparam("tm", "onreply_avp_mode", 1)

  #### Record Route Module
  loadmodule "rr.so"
  /* do not append from tag to the RR (no need for this script) */
  modparam("rr", "append_fromtag", 0)

  #### MAX ForWarD module
  loadmodule "maxfwd.so"

  #### SIP MSG OPerationS module
  loadmodule "sipmsgops.so"

  #### FIFO Management Interface
  loadmodule "mi_fifo.so"
  modparam("mi_fifo", "fifo_name", "/run/opensips_fifo")
  modparam("mi_fifo", "fifo_mode", 0666)

  #### USeR LOCation module
  loadmodule "usrloc.so"
  modparam("usrloc", "nat_bflag", "NAT")
  modparam("usrloc", "working_mode_preset", "single-instance-no-db")

  #### REGISTRAR module
  loadmodule "registrar.so"
  modparam("registrar", "tcp_persistent_flag", "TCP_PERSISTENT")
  /* uncomment the next line not to allow more than 10 contacts per AOR */
  #modparam("registrar", "max_contacts", 10)

  #### ACCounting module
  loadmodule "acc.so"
  /* what special events should be accounted ? */
  modparam("acc", "early_media", 0)
  modparam("acc", "report_cancels", 0)
  /* by default we do not adjust the direct of the sequential requests.
    if you enable this parameter, be sure to enable "append_fromtag"
    in "rr" module */
  modparam("acc", "detect_direction", 0)

  loadmodule "proto_udp.so"

  loadmodule "httpd.so"
  #modparam("httpd", "ip", "127.0.0.1")
  #modparam("httpd", "port", 8000)
  loadmodule "mi_http.so"
  

  ####### Routing Logic ########

  # main request routing logic

  route{
    if (!mf_process_maxfwd_header(10)) {
      send_reply(483,"Too Many Hops");
      exit;
    }

    if (has_totag()) {
      # handle hop-by-hop ACK (no routing required)
      if ( is_method("ACK") && t_check_trans() ) {
        t_relay();
        exit;
      }

      # sequential request within a dialog should
      # take the path determined by record-routing
      if ( !loose_route() ) {
        # we do record-routing for all our traffic, so we should not
        # receive any sequential requests without Route hdr.
        send_reply(404,"Not here");
        exit;
      }

      if (is_method("BYE")) {
        # do accounting even if the transaction fails
        do_accounting("log","failed");
      }

      # route it out to whatever destination was set by loose_route()
      # in $du (destination URI).
      route(relay);
      exit;
    }

    # CANCEL processing
    if (is_method("CANCEL")) {
      if (t_check_trans())
        t_relay();
      exit;
    }

    # absorb retransmissions, but do not create transaction
    t_check_trans();

    if ( !(is_method("REGISTER")  ) ) {      
      if (is_myself("$fd")) {
            
      } else {
        # force all calls to be local
        $rd = $Ri;

        # if caller is not local, then called number must be local        
        #if (!is_myself("$rd")) {
        #  send_reply(403,"Relay Forbidden");
        #  exit;
        #}
      }
    }

    # preloaded route checking
    if (loose_route()) {
      xlog("L_ERR",
        "Attempt to route with preloaded Route's [$fu/$tu/$ru/$ci]");
      if (!is_method("ACK"))
        send_reply(403,"Preload Route denied");
      exit;
    }

    # record routing
    if (!is_method("REGISTER|MESSAGE"))
      record_route();

    # account only INVITEs
    if (is_method("INVITE")) {      
      do_accounting("log");
    }
    
    if (!is_myself("$rd")) {
      append_hf("P-hint: outbound\r\n");       
      route(relay);
    }

    # requests for my domain    
    if (is_method("PUBLISH|SUBSCRIBE")) {
      send_reply(503, "Service Unavailable");
      exit;
    }

    if (is_method("REGISTER")) {
      # store the registration and generate a SIP reply
      if (!save("location"))
        xlog("failed to register AoR $tu\n");
      exit;
    }

    if ($rU==NULL) {
      # request with no Username in RURI
      send_reply(484,"Address Incomplete");
      exit;
    }

    # do lookup with method filtering
    if (!lookup("location","method-filtering")) {
      t_reply(404, "Not Found");
      exit;
    }

    # when routing via usrloc, log the missed calls also
    do_accounting("log","missed");
    route(relay);
  }

  route[relay] {
    # for INVITEs enable some additional helper routes
    if (is_method("INVITE")) {
      t_on_branch("per_branch_ops");
      t_on_reply("handle_nat");
      t_on_failure("missed_call");
    }

    if (!t_relay()) {
      send_reply(500,"Internal Error");
    }
    exit;
  }

  branch_route[per_branch_ops] {
    xlog("new branch at $ru\n");
  }

  onreply_route[handle_nat] {
    xlog("incoming reply\n");
  }

  failure_route[missed_call] {
    if (t_was_cancelled()) {
      exit;
    }

    # uncomment the following lines if you want to block client 
    # redirect based on 3xx replies.
    ##if (t_check_status("3[0-9][0-9]")) {
    ##t_reply(404,"Not found");
    ##	exit;
    ##}
  }

