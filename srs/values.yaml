# Default values for srs.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 4

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: dkaminari/sipp
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 5060

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - configMap:
      defaultMode: 420
      items:
      - key: registration-scenario
        path: reg.xml
      - key: uas-scenario
        path: uas.xml
      name: srs
    name: config-volume
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

registrationScenario: |
  <?xml version="1.0" encoding="ISO-8859-1" ?>
  <!DOCTYPE scenario SYSTEM "sipp.dtd">
  <scenario name="Register">

    <label id="1"/>
    <send retrans="500">
      <![CDATA[
        REGISTER sip:[remote_ip]:[remote_port] SIP/2.0
        Via: SIP/2.0/[transport] [local_ip]:[local_port];branch=[branch]
        From: <sip:srs@pindrop.com>;tag=[pid]SIPpTag00[call_number]
        To: <sip:srs@pindrop.com>
        Call-ID: [call_id]
        CSeq: [cseq] REGISTER
        Contact: sip:srs@[local_ip]:6060;expires=30
        Max-Forwards: 70
        Content-Type: application/sdp
        Content-Length: [len]
      ]]>
    </send>
    <recv response="200">
    </recv>
    
    <pause milliseconds="20000"/>

    <nop next="1"/>

  </scenario>  

uasScenario: |
  <?xml version="1.0" encoding="ISO-8859-1" ?>
  <!DOCTYPE scenario SYSTEM "sipp.dtd">
  <scenario name="Basic UAS responder">
    <!-- By adding rrs="true" (Record Route Sets), the route sets         -->
    <!-- are saved and used for following messages sent. Useful to test   -->
    <!-- against stateful SIP proxies/B2BUAs.                             -->
    <!-- Adding ignoresdp="true" here would ignore the SDP data: that     -->
    <!-- can be useful if you want to reject reINVITEs and keep the       -->
    <!-- media stream flowing.                                            -->
    <recv request="INVITE" crlf="true" rrs="true">
    </recv>

    <!-- The '[last_*]' keyword is replaced automatically by the          -->
    <!-- specified header if it was present in the last message received  -->
    <!-- (except if it was a retransmission). If the header was not       -->
    <!-- present or if no message has been received, the '[last_*]'       -->
    <!-- keyword is discarded, and all bytes until the end of the line    -->
    <!-- are also discarded.                                              -->
    <!--                                                                  -->
    <!-- If the specified header was present several times in the         -->
    <!-- message, all occurrences are concatenated (CRLF separated)       -->
    <!-- to be used in place of the '[last_*]' keyword.                   -->

    <send>
      <![CDATA[

        SIP/2.0 180 Ringing
        [last_Via:]
        [last_From:]
        [last_To:];tag=[pid]SIPpTag01[call_number]
        [last_Call-ID:]
        [last_CSeq:]
        Contact: <sip:[local_ip]:[local_port];transport=[transport]>
        Content-Length: 0

      ]]>
    </send>

    <send retrans="500">
      <![CDATA[

        SIP/2.0 200 OK
        [last_Via:]
        [last_Record-Route:]
        [last_From:]
        [last_To:];tag=[pid]SIPpTag01[call_number]
        [last_Call-ID:]
        [last_CSeq:]
        Contact: <sip:[local_ip]:[local_port];transport=[transport]>
        Content-Type: application/sdp
        Content-Length: [len]

        v=0
        o=user1 53655765 2353687637 IN IP[local_ip_type] [local_ip]
        s=-
        c=IN IP[media_ip_type] [media_ip]
        t=0 0
        m=audio [media_port] RTP/AVP 0
        a=rtpmap:0 PCMU/8000

      ]]>
    </send>

    <recv request="ACK"
          optional="true"
          rtd="true"
          crlf="true">
    </recv>

    <recv request="BYE">
    </recv>

    <send>
      <![CDATA[

        SIP/2.0 200 OK
        [last_Via:]
        [last_From:]
        [last_To:]
        [last_Call-ID:]
        [last_CSeq:]
        Contact: <sip:[local_ip]:[local_port];transport=[transport]>
        Content-Length: 0

      ]]>
    </send>

    <!-- Keep the call open for a while in case the 200 is lost to be     -->
    <!-- able to retransmit it if we receive the BYE again.               -->
    <timewait milliseconds="4000"/>


    <!-- definition of the response time repartition table (unit is ms)   -->
    <ResponseTimeRepartition value="10, 20, 30, 40, 50, 100, 150, 200"/>

    <!-- definition of the call length repartition table (unit is ms)     -->
    <CallLengthRepartition value="10, 50, 100, 500, 1000, 5000, 10000"/>

  </scenario>

# Additional volumeMounts on the output Deployment definition.
volumeMounts: 
  - name: config-volume
    mountPath: "/scenarios"
    readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}

container:
  command: "sh"
  command1: "-c"
  command2: "--" 
  args: "sipp -bg -m 1 -sf /scenarios/reg.xml sipproxy-0.sipproxy-registrar.sip.svc.cluster.local:30070; sipp -bg -m 1 -sf /scenarios/reg.xml sipproxy-1.sipproxy-registrar.sip.svc.cluster.local:30070; sipp -sf /scenarios/uas.xml -p 6060; while true; do echo SRS keepalive; sleep 10; done;"

